{"status":{},"spec":{"name":"Windows_Deployment_","description":"","resources":{"service_definition_list":[{"name":"Windows","description":"","variable_list":[{"type":"LOCAL","name":"VM_NAME","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"ACI-Informatica"},{"type":"LOCAL","name":"domain","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"ntnxlab.local"},{"type":"LOCAL","name":"pc_ip","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"10.38.100.7"},{"type":"LOCAL","name":"vmname","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":""},{"type":"LOCAL","name":"vmuuid","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":""}],"action_list":[{"type":"system","name":"action_create","description":"System action for creating an application","runbook":{"name":"dd19213b_runbook","description":"","task_definition_list":[{"type":"DAG","name":"68db141d_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"DomainJoin","kind":"app_task"},"to_task_reference":{"name":"Restart","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Restart","kind":"app_task"},"to_task_reference":{"name":"Wait","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Wait","kind":"app_task"},"to_task_reference":{"name":"Eject CD ROM","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Fetch VM_Name_UUID","kind":"app_task"},"to_task_reference":{"name":"Assign_Category","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Assign_Category","kind":"app_task"},"to_task_reference":{"name":"Enable_RDP  ","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Fetch VM_Name_UUID","kind":"app_task"},{"name":"DomainJoin","kind":"app_task"},{"name":"Assign_Category","kind":"app_task"},{"name":"Restart","kind":"app_task"},{"name":"Enable_RDP  ","kind":"app_task"},{"name":"Wait","kind":"app_task"},{"name":"Eject CD ROM","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"SET_VARIABLE","name":"Fetch VM_Name_UUID","description":"","attrs":{"type":"","script":"vmname = \"@@{platform.status.name}@@\"\nvmuuid = \"@@{platform.metadata.uuid}@@\"","script_type":"static_py3","exit_status":[],"eval_scope":"local","eval_variables":["vmname","vmuuid"]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"DomainJoin","description":"","attrs":{"type":"","script":"# region headers\n# posh-api-template v20190604 \/ stephane.bourdeaud@nutanix.com\n#* author:       stephane.bourdeaud@nutanix.com\n#* version:      11\/14\/2019\n#  task_name:    JoinDomain\n#  description:  Joins the specified Active Directory domain\n# endregion\n#region capture Calm variables\n$ad_username = \"@@{ad_credentials.username}@@\"\n$ad_username_secret = \"@@{ad_credentials.secret}@@\"\n$ad_domain = \"@@{domain}@@\"\n#endregion\n#Setting up DNS server\nGet-NetAdapter | Set-DnsClientServerAddress -ServerAddresses \"10.38.100.7\"\n#converting password to something we can use\n$adminpassword = ConvertTo-SecureString -asPlainText -Force -String \"$ad_username_secret\"\n#creating the credentials object based on the Calm variables\n$credential = New-Object System.Management.Automation.PSCredential($ad_username,$adminpassword)\n#joing the domain\ntry {$result = add-computer -domainname $ad_domain -Credential ($credential) -Force -Options JoinWithNewName,AccountCreate -PassThru -ErrorAction Stop -Verbose}\ncatch {throw \"Could not join Active Directory domain : $($_.Exception.Message)\"}\nwrite-host \"Successfully joined Active Directory domain $ad_domain\" -ForegroundColor Green","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"HTTP","name":"Assign_Category","description":"","attrs":{"type":"","method":"POST","connection_timeout":120,"headers":[],"url":"https:\/\/10.38.100.7:9440\/api\/nutanix\/v3\/action_rules\/trigger","request_body":"{\n  \"trigger_type\": \"incoming_webhook_trigger\",\n  \"trigger_instance_list\": [{\n    \"webhook_id\": \"d37a0d8f-50fe-4848-8756-ef9a8c9e53ae\",\n    \"string1\": \"@@{vmname}@@\",\n    \"entity1\": \"{\\\"type\\\":\\\"VM\\\",\\\"name\\\":\\\"@@{platform.status.name}@@\\\",\\\"uuid\\\":\\\"@@{platform.metadata.uuid}@@\\\"}\"\n  }]\n}","content_type":"application\/json","expected_response_params":[{"type":"","code":202,"status":"SUCCESS"}],"authentication":{"type":"basic_with_cred","credential_local_reference":{"name":"pc","kind":"app_credential"}},"response_paths":{},"tls_verify":false,"proxy_type":"","retry_count":1,"retry_interval":1},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Restart","description":"","attrs":{"type":"","script":"Start-Job -ScriptBlock {Restart-Computer -Force}\nexit 0","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Enable_RDP  ","description":"","attrs":{"type":"","script":"Set-ItemProperty \u2018HKLM:\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Terminal Server\\\\\u2018 -Name \u201cfDenyTSConnections\u201d -Value 0\n#Enable Windows Firewall incoming rule for RDP\nEnable-NetFirewallRule -DisplayGroup \u201cRemote Desktop\u201d","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Wait","description":"","attrs":{"type":"","script":" Start-Sleep -Seconds 30","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Eject CD ROM","description":"","attrs":{"type":"","script":"$sh = New-Object -ComObject \"Shell.Application\"\n$sh.Namespace(17).Items() | \n    Where-Object { $_.Type -eq \"CD Drive\" } | \n        foreach { $_.InvokeVerb(\"Eject\") }","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"68db141d_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"system","name":"action_delete","description":"System action for deleting an application. Deletes created VMs as well","runbook":{"name":"812a0253_runbook","description":"","task_definition_list":[{"type":"DAG","name":"4d605be6_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"4d605be6_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"system","name":"action_start","description":"System action for starting an application","runbook":{"name":"dc3a9c55_runbook","description":"","task_definition_list":[{"type":"DAG","name":"fac02658_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"fac02658_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"system","name":"action_stop","description":"System action for stopping an application","runbook":{"name":"df74d303_runbook","description":"","task_definition_list":[{"type":"DAG","name":"2307ef13_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"2307ef13_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"system","name":"action_restart","description":"System action for restarting an application","runbook":{"name":"7fb0e531_runbook","description":"","task_definition_list":[{"type":"DAG","name":"09494678_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"09494678_dag","kind":"app_task"},"variable_list":[]},"critical":false}],"depends_on_list":[],"port_list":[],"singleton":false,"tier":""}],"published_service_definition_list":[],"substrate_definition_list":[{"type":"AHV_VM","name":"BaseVM","description":"","variable_list":[],"action_list":[],"editables":{"create_spec":{"resources":{"boot_config":{"boot_device":true},"disk_list":{"0":{"data_source_reference":true}},"nic_list":{"0":{"subnet_reference":true,"vpc_reference":true,"ip_endpoint_list":true}}}}},"create_spec":{"type":"","name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","availability_zone_reference":null,"backup_policy":null,"cluster_reference":{"type":"","kind":"cluster","name":"PHX-POC328","uuid":"00062820-1c38-9b8f-0000-000000010979"},"resources":{"type":"","nic_list":[{"type":"","nic_type":"NORMAL_NIC","subnet_reference":{"type":"","kind":"subnet","name":"","uuid":"342dbf72-2de7-49bd-8ff4-2133ae2cbbb5"},"network_function_nic_type":"INGRESS","mac_address":"","ip_endpoint_list":[{"type":"ASSIGNED","ip":""}],"network_function_chain_reference":null,"vpc_reference":null}],"power_state":"ON","guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":2,"memory_size_mib":4096,"gpu_list":[],"parent_reference":null,"hardware_clock_timezone":"","account_uuid":"a976aaf3-8375-46c0-8074-a40c8dd635ea","guest_customization":{"type":"","cloud_init":null,"sysprep":{"type":"","install_type":"PREPARED","unattend_xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n   <settings pass=\"specialize\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <ComputerName>Win-@@{calm_unique}@@<\/ComputerName>\n         <RegisteredOrganization>Nutanix<\/RegisteredOrganization>\n         <RegisteredOwner>Acropolis<\/RegisteredOwner>\n         <TimeZone>UTC<\/TimeZone>\n      <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <fDenyTSConnections>false<\/fDenyTSConnections>\n      <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <UserAuthentication>0<\/UserAuthentication>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <FirewallGroups>\n            <FirewallGroup wcm:action=\"add\" wcm:keyValue=\"RemoteDesktop\">\n               <Active>true<\/Active>\n               <Profile>all<\/Profile>\n               <Group>@FirewallAPI.dll,-28752<\/Group>\n            <\/FirewallGroup>\n         <\/FirewallGroups>\n      <\/component>\n       <component name=\"Microsoft-Windows-DNS-Client\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <Interfaces>\n                <Interface wcm:action=\"add\">\n                    <DNSServerSearchOrder>\n                        <IpAddress wcm:action=\"add\" wcm:keyValue=\"1\">10.38.100.6<\/IpAddress>\n                    <\/DNSServerSearchOrder>\n                    <DNSDomain>cto.lab<\/DNSDomain>\n                    <EnableAdapterDomainNameRegistration>true<\/EnableAdapterDomainNameRegistration>\n                    <Identifier>Ethernet<\/Identifier>\n                <\/Interface>\n            <\/Interfaces>\n        <\/component>\n   <\/settings>\n   <settings pass=\"oobeSystem\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <UserAccounts>\n            <AdministratorPassword>\n               <Value>@@{vm_cred.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/AdministratorPassword>\n         <\/UserAccounts>\n         <AutoLogon>\n            <Password>\n               <Value>@@{vm_cred.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/Password>\n            <Enabled>true<\/Enabled>\n            <Username>Administrator<\/Username>\n         <\/AutoLogon>\n         <FirstLogonCommands>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>cmd.exe \/c netsh firewall add portopening TCP 5985 \"Port 5985\"<\/CommandLine>\n               <Description>Win RM port open<\/Description>\n               <Order>1<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Enable-PSRemoting -SkipNetworkProfileCheck -Force\"<\/CommandLine>\n               <Description>Enable PS-Remoting<\/Description>\n               <Order>2<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\"<\/CommandLine>\n               <Description>Enable Remote-Signing<\/Description>\n               <Order>3<\/Order>\n               <RequiresUserInput>false<\/RequiresUserInput>\n            <\/SynchronousCommand>\n         <\/FirstLogonCommands>\n         <OOBE>\n            <HideEULAPage>true<\/HideEULAPage>\n            <SkipMachineOOBE>true<\/SkipMachineOOBE>\n         <\/OOBE>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <InputLocale>en-US<\/InputLocale>\n         <SystemLocale>en-US<\/SystemLocale>\n         <UILanguageFallback>en-us<\/UILanguageFallback>\n         <UILanguage>en-US<\/UILanguage>\n         <UserLocale>en-US<\/UserLocale>\n      <\/component>\n   <\/settings>\n<\/unattend>","is_domain":false,"domain":"","domain_credential_reference":null,"dns_ip":"","dns_search_path":""}},"boot_config":{"type":"","boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"mac_address":"","boot_type":"LEGACY"},"disk_list":[{"type":"","data_source_reference":{"type":"","kind":"image","name":"windows-server-2022.qcow2","uuid":"1fa43b25-5d24-4978-95d8-4a3524294bc0"},"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"},"disk_size_mib":204800},{"type":"","data_source_reference":null,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"IDE"},"device_type":"CDROM"},"disk_size_mib":0}],"serial_port_list":[]},"categories":{}},"os_type":"Windows","readiness_probe":{"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"},"connection_type":"POWERSHELL","connection_port":5985,"delay_secs":"60","retries":"5","address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","disable_readiness_probe":true,"connection_protocol":"http"}},{"type":"AHV_VM","name":"BaseVM_cloned_0","description":"","variable_list":[],"action_list":[],"editables":{"create_spec":{"resources":{"boot_config":{"boot_device":true},"disk_list":{"0":{"data_source_reference":true}}}}},"create_spec":{"type":"","name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","availability_zone_reference":null,"backup_policy":null,"cluster_reference":{"type":"","kind":"cluster","name":"PHX-POC328","uuid":"00062820-1c38-9b8f-0000-000000010979"},"resources":{"type":"","nic_list":[{"type":"","nic_type":"NORMAL_NIC","subnet_reference":{"type":"","kind":"subnet","name":"","uuid":"342dbf72-2de7-49bd-8ff4-2133ae2cbbb5"},"network_function_nic_type":"INGRESS","mac_address":"","ip_endpoint_list":[],"network_function_chain_reference":null,"vpc_reference":null}],"power_state":"ON","guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":4,"memory_size_mib":8192,"gpu_list":[],"parent_reference":null,"hardware_clock_timezone":"","account_uuid":"a976aaf3-8375-46c0-8074-a40c8dd635ea","guest_customization":{"type":"","cloud_init":null,"sysprep":{"type":"","install_type":"PREPARED","unattend_xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n   <settings pass=\"specialize\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <ComputerName>Win-@@{calm_unique}@@<\/ComputerName>\n         <RegisteredOrganization>Nutanix<\/RegisteredOrganization>\n         <RegisteredOwner>Acropolis<\/RegisteredOwner>\n         <TimeZone>UTC<\/TimeZone>\n      <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <fDenyTSConnections>false<\/fDenyTSConnections>\n      <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <UserAuthentication>0<\/UserAuthentication>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <FirewallGroups>\n            <FirewallGroup wcm:action=\"add\" wcm:keyValue=\"RemoteDesktop\">\n               <Active>true<\/Active>\n               <Profile>all<\/Profile>\n               <Group>@FirewallAPI.dll,-28752<\/Group>\n            <\/FirewallGroup>\n         <\/FirewallGroups>\n      <\/component>\n       <component name=\"Microsoft-Windows-DNS-Client\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <Interfaces>\n                <Interface wcm:action=\"add\">\n                    <DNSServerSearchOrder>\n                        <IpAddress wcm:action=\"add\" wcm:keyValue=\"1\">10.38.100.6<\/IpAddress>\n                    <\/DNSServerSearchOrder>\n                    <DNSDomain>cto.lab<\/DNSDomain>\n                    <EnableAdapterDomainNameRegistration>true<\/EnableAdapterDomainNameRegistration>\n                    <Identifier>Ethernet<\/Identifier>\n                <\/Interface>\n            <\/Interfaces>\n        <\/component>\n   <\/settings>\n   <settings pass=\"oobeSystem\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <UserAccounts>\n            <AdministratorPassword>\n               <Value>@@{vm_cred.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/AdministratorPassword>\n         <\/UserAccounts>\n         <AutoLogon>\n            <Password>\n               <Value>@@{vm_cred.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/Password>\n            <Enabled>true<\/Enabled>\n            <Username>Administrator<\/Username>\n         <\/AutoLogon>\n         <FirstLogonCommands>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>cmd.exe \/c netsh firewall add portopening TCP 5985 \"Port 5985\"<\/CommandLine>\n               <Description>Win RM port open<\/Description>\n               <Order>1<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Enable-PSRemoting -SkipNetworkProfileCheck -Force\"<\/CommandLine>\n               <Description>Enable PS-Remoting<\/Description>\n               <Order>2<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\"<\/CommandLine>\n               <Description>Enable Remote-Signing<\/Description>\n               <Order>3<\/Order>\n               <RequiresUserInput>false<\/RequiresUserInput>\n            <\/SynchronousCommand>\n         <\/FirstLogonCommands>\n         <OOBE>\n            <HideEULAPage>true<\/HideEULAPage>\n            <SkipMachineOOBE>true<\/SkipMachineOOBE>\n         <\/OOBE>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <InputLocale>en-US<\/InputLocale>\n         <SystemLocale>en-US<\/SystemLocale>\n         <UILanguageFallback>en-us<\/UILanguageFallback>\n         <UILanguage>en-US<\/UILanguage>\n         <UserLocale>en-US<\/UserLocale>\n      <\/component>\n   <\/settings>\n<\/unattend>","is_domain":false,"domain":"","domain_credential_reference":null,"dns_ip":"","dns_search_path":""}},"boot_config":{"type":"","boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"mac_address":"","boot_type":"LEGACY"},"disk_list":[{"type":"","data_source_reference":{"type":"","kind":"image","name":"windows-server-2022.qcow2","uuid":"1fa43b25-5d24-4978-95d8-4a3524294bc0"},"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"},"disk_size_mib":204800},{"type":"","data_source_reference":null,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"IDE"},"device_type":"CDROM"},"disk_size_mib":0}],"serial_port_list":[]},"categories":{}},"os_type":"Windows","readiness_probe":{"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"},"connection_type":"POWERSHELL","connection_port":5985,"delay_secs":"60","retries":"5","address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","disable_readiness_probe":true,"connection_protocol":"http"}},{"type":"AHV_VM","name":"BaseVM_cloned_1","description":"","variable_list":[],"action_list":[],"editables":{"create_spec":{"resources":{"boot_config":{"boot_device":true},"disk_list":{"0":{"data_source_reference":true}}}}},"create_spec":{"type":"","name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","availability_zone_reference":null,"backup_policy":null,"cluster_reference":{"type":"","kind":"cluster","name":"PHX-POC328","uuid":"00062820-1c38-9b8f-0000-000000010979"},"resources":{"type":"","nic_list":[{"type":"","nic_type":"NORMAL_NIC","subnet_reference":{"type":"","kind":"subnet","name":"","uuid":"342dbf72-2de7-49bd-8ff4-2133ae2cbbb5"},"network_function_nic_type":"INGRESS","mac_address":"","ip_endpoint_list":[],"network_function_chain_reference":null,"vpc_reference":null}],"power_state":"ON","guest_tools":null,"num_vcpus_per_socket":4,"num_sockets":4,"memory_size_mib":16384,"gpu_list":[],"parent_reference":null,"hardware_clock_timezone":"","account_uuid":"a976aaf3-8375-46c0-8074-a40c8dd635ea","guest_customization":{"type":"","cloud_init":null,"sysprep":{"type":"","install_type":"PREPARED","unattend_xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n   <settings pass=\"specialize\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <ComputerName>Win-@@{calm_unique}@@<\/ComputerName>\n         <RegisteredOrganization>Nutanix<\/RegisteredOrganization>\n         <RegisteredOwner>Acropolis<\/RegisteredOwner>\n         <TimeZone>UTC<\/TimeZone>\n      <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <fDenyTSConnections>false<\/fDenyTSConnections>\n      <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <UserAuthentication>0<\/UserAuthentication>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <FirewallGroups>\n            <FirewallGroup wcm:action=\"add\" wcm:keyValue=\"RemoteDesktop\">\n               <Active>true<\/Active>\n               <Profile>all<\/Profile>\n               <Group>@FirewallAPI.dll,-28752<\/Group>\n            <\/FirewallGroup>\n         <\/FirewallGroups>\n      <\/component>\n       <component name=\"Microsoft-Windows-DNS-Client\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <Interfaces>\n                <Interface wcm:action=\"add\">\n                    <DNSServerSearchOrder>\n                        <IpAddress wcm:action=\"add\" wcm:keyValue=\"1\">10.38.100.6<\/IpAddress>\n                    <\/DNSServerSearchOrder>\n                    <DNSDomain>cto.lab<\/DNSDomain>\n                    <EnableAdapterDomainNameRegistration>true<\/EnableAdapterDomainNameRegistration>\n                    <Identifier>Ethernet<\/Identifier>\n                <\/Interface>\n            <\/Interfaces>\n        <\/component>\n   <\/settings>\n   <settings pass=\"oobeSystem\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <UserAccounts>\n            <AdministratorPassword>\n               <Value>@@{vm_cred.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/AdministratorPassword>\n         <\/UserAccounts>\n         <AutoLogon>\n            <Password>\n               <Value>@@{vm_cred.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/Password>\n            <Enabled>true<\/Enabled>\n            <Username>Administrator<\/Username>\n         <\/AutoLogon>\n         <FirstLogonCommands>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>cmd.exe \/c netsh firewall add portopening TCP 5985 \"Port 5985\"<\/CommandLine>\n               <Description>Win RM port open<\/Description>\n               <Order>1<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Enable-PSRemoting -SkipNetworkProfileCheck -Force\"<\/CommandLine>\n               <Description>Enable PS-Remoting<\/Description>\n               <Order>2<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\"<\/CommandLine>\n               <Description>Enable Remote-Signing<\/Description>\n               <Order>3<\/Order>\n               <RequiresUserInput>false<\/RequiresUserInput>\n            <\/SynchronousCommand>\n         <\/FirstLogonCommands>\n         <OOBE>\n            <HideEULAPage>true<\/HideEULAPage>\n            <SkipMachineOOBE>true<\/SkipMachineOOBE>\n         <\/OOBE>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <InputLocale>en-US<\/InputLocale>\n         <SystemLocale>en-US<\/SystemLocale>\n         <UILanguageFallback>en-us<\/UILanguageFallback>\n         <UILanguage>en-US<\/UILanguage>\n         <UserLocale>en-US<\/UserLocale>\n      <\/component>\n   <\/settings>\n<\/unattend>","is_domain":false,"domain":"","domain_credential_reference":null,"dns_ip":"","dns_search_path":""}},"boot_config":{"type":"","boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"mac_address":"","boot_type":"LEGACY"},"disk_list":[{"type":"","data_source_reference":{"type":"","kind":"image","name":"windows-server-2022.qcow2","uuid":"1fa43b25-5d24-4978-95d8-4a3524294bc0"},"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"},"disk_size_mib":204800},{"type":"","data_source_reference":null,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"IDE"},"device_type":"CDROM"},"disk_size_mib":0}],"serial_port_list":[]},"categories":{}},"os_type":"Windows","readiness_probe":{"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"},"connection_type":"POWERSHELL","connection_port":5985,"delay_secs":"60","retries":"5","address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","disable_readiness_probe":true,"connection_protocol":"http"}}],"package_definition_list":[{"type":"DEB","name":"Package1","description":"","variable_list":[],"action_list":[],"service_local_reference_list":[{"name":"Windows","kind":"app_service"}],"version":"","options":{"type":"","install_runbook":{"name":"f9975b05_runbook","description":"","task_definition_list":[{"type":"DAG","name":"2be3584b_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"pcMountNGT","kind":"app_task"},"to_task_reference":{"name":"NGTInstaller","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"NGTInstaller","kind":"app_task"},"to_task_reference":{"name":"PcEnableNewNgt","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"PcEnableNewNgt","kind":"app_task"},"to_task_reference":{"name":"IIS","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"IIS","kind":"app_task"},"to_task_reference":{"name":"Git","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Git","kind":"app_task"},"to_task_reference":{"name":"vsCode","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"pcMountNGT","kind":"app_task"},{"name":"NGTInstaller","kind":"app_task"},{"name":"PcEnableNewNgt","kind":"app_task"},{"name":"IIS","kind":"app_task"},{"name":"Git","kind":"app_task"},{"name":"vsCode","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Package1","kind":"app_package"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"pcMountNGT","description":"","attrs":{"type":"","script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcMountNgt\n# description:    This script mounts the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm.\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Mounting NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n\n# region mount the NGT image (to regenerate the certificates)\npe_password = \"nx2Tech206!\"\npe_user = \"admin\"\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}\/guest_tools\/mount\".format(\n    cluster_ip,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pe_user, pe_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT mounted\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"NGTInstaller","description":"","attrs":{"type":"","script":"<#\n.notes\n##############################################################################\n#          Nutanix Guest Tools Active Directory Installer Script\n#          Filename            :      NTNX_NGT_Startup_Installer.ps1\n#          Script Version      :      1.0.5\n#          Author              :      Ed McAndrew (ed.mcandrew@nutanix.com)\n##############################################################################\n.prerequisites\n    1. Powershell 4 or above ($psversiontable.psversion.major)\n    2. Windows Vista or newer.\n    3. There is a shared key exchange between the ISO\/Mount process and the Nutanix Guest Tools installation process.\n            a) For Nutanix Guest Tools to work properly, you MUST mount the Nutanix Guest Tools ISO to the virtual machine prior to this startup script execution.\n            b) To do this, either use Prism to mount the NGT ISO, or from SSH to one of your Controller Virtual Machines (CVMs), run the following.\n                $ ncli ngt mount vm-id=<vm_id>\n                note: To get the <vm_id>, you can use the following command\n                            $ ncli vm list | grep -B2 <part of your vm name>\n                            Example; Our <vm_id> will be: 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                $ ncli vm list | grep -B2 emcandrew\n                                Id                        : 00056eb6-a64f-650a-0000-00000000a8bb::11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Uuid                      : 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Name                      : emcandrew-win10\n                note: You can also do a mass mounting of the Nutanix Guest Tools (WARNING: THIS WILL MOUNT THE NGT ISO ON ALL VIRTUAL MACHINES):\n                            To Mount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt mount vm-id=$i;done\n                            To Unmount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt unmount vm-id=$i;done\n                note: You can also build a master list of virtual machines, edit that list and then mount the NGT ISO based on the edited list.\n                            To build the list:\n                                $ ncli vm list | egrep 'Id|Name' | grep -v \"Hypervisor\" | awk '{$1=$2=\"\"; print $0}' | paste -sd ' \\n' > ~\/ngt_iso_mount.txt\n                            Once done editing with VIM (vi), save the file and run the following one-liner.  This one will parse each line of the file and mount the NGT ISO to each VM.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nMounting NGT: $a\"; ncli ngt mount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n                            The installation package will eject the ISO when it completes.  But if you need to manually unmount the ISO, you can use this same process but unmount instead.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nUnmounting NGT: $a\"; ncli ngt unmount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n.synopsis\n    Determine if Nutanix Guest Tools (NGT) is installed.  If not installed, determine mount path for NGT ISO and install from that.  Basic state information written to Application Event log under eventid 1.\n.usage\n    Run this script from an Active Directory startup script GPO\n.author\n    Ed McAndrew (ed.mcandrew@nutanix.com)\n.disclaimer\n    This script is provided \"AS IS\" without any additional support of any kind.\n    This script is provided \"AS IS\" without warranty of any kind, either expressed or implied, including but not limited to the implied warranties of merchantability and\/or fitness for a particular purpose.\n#>\n##############################################################################\n# SET VARIABLES\n##############################################################################\n$my_log_directory = \"c:\\temp\"\n##############################################################################\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n# CHANGE NOTHING BELOW HERE!\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n[string]$my_temperract = $erroractionpreference # set error handling preferences\n[string]$erroractionpreference = \"silentlycontinue\" # set error handling preferences\n$ntnx_cnt = 0\nfunction write-log {\n    [cmdletbinding()]\n    param(\n        [parameter(valuefrompipeline=$true,mandatory=$true)] [validatenotnullorempty()]\n        [string] $message,\n        [parameter()] [validateset(\"Error\", \"Warn\", \"Info\")]\n        [string] $level = \"Info\"\n    )\n    $eventid = 1\n    $eventlogname = \"Application\"\n    $eventsource = \"Nutanix Guest Tools Installer Script\"\n    if (-not [diagnostics.eventlog]::sourceexists($eventsource)) { [diagnostics.eventlog]::createeventsource($eventsource, $eventlogname) }\n    $log = new-object system.diagnostics.eventlog\n    $log.set_log($eventlogname)\n    $log.set_source($eventsource)\n    switch ($level) {\n        \"error\" { $log.writeentry($message, 'Error', $eventid) }\n        \"warn\"  { $log.writeentry($message, 'Warning', $eventid) }\n        \"info\"  { $log.writeentry($message, 'Information', $eventid) }\n    }\n}\nget-wmiobject -class win32_product | % { if ($_.Name -match \"nutanix\") { $ntnx_cnt++ } }\nif ($ntnx_cnt -ne 6) {\n    $my_driveid = (get-ciminstance Win32_LogicalDisk | ?{ $_.volumename -eq \"NUTANIX_TOOLS\" }).deviceid\n    $my_date = get-date -format 'MMddyyyy_HHmm'\n    $my_files = @(\"Nutanix_Guest_Tools*\")\n    if ($my_driveid) {\n        try {\n            if (test-path \"$($my_driveid)\\setup.exe\") {\n                write-log -message\"Starting Nutanix Guest Tools Installer...\" -level info\n                $process = start-process \"$($my_driveid)\\setup.exe\" -windowstyle Hidden -argumentlist \"\/quiet \/norestart ACCEPTEULA=YES IGNOREALLWARNINGS=yes log $($my_log_directory)\\NGT\\\" -passthru -wait\n                if ($process.exitcode -eq 0) {\n                    write-log -message \"Installation Succeeded...\" -level info\n                }\n                else {\n                    write-log -message \"Installation failed, non-zero exit code...\" -level warn\n                }\n            }\n            else {\n                    write-log -message \"Installation failed, setup executable not found...\" -level warn\n            }\n        }\n        catch {\n            write-log -message \"Installation failed...`r`n$($_)\" -level error\n        }\n        new-item -itemtype directory -force -path \"$($my_log_directory)\\NGT\" | out-null; get-childitem -recurse ($env:temp) -include ($my_files) | move-item -destination \"$($my_log_directory)\\NGT\\\" -ea silentlycontinue\n    }\n    else {\n        write-log -message \"Installation failed, ISO not mounted...\" -level warn\n    }\n}\nelse {\n    write-log -message \"Nutanix Guest Tools is already installed...\" -level info\n}\n$erroractionpreference = $my_temperract\nexit\n########","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"PcEnableNewNgt","description":"","attrs":{"type":"","script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       salaheddine.gassim@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcEnableNewNgt\n# description:    This script enables the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm. It assumes NGT has been\n#                 installed after the VM was deployed (as opposed to being\n#                 pre-installed in the VM template).\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\nvm_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/vms\/{}\".format(\n    pc_ip,\n    vm_uuid\n)\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Enabling NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion\n\n# region enable guest tools for the VM\npe_password = \"nx2Tech206!\"\npe_user = \"admin\"\n\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}::{}\/guest_tools\".format(\n    cluster_ip,\n    cluster_uuid,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\npayload = {\n    \"vmUuid\": cluster_uuid + \"::\" + vm_uuid,\n    \"enabled\": \"true\",\n    \"applications\": {\n        \"file_level_restore\": \"false\",\n        \"vss_snapshot\": \"true\"\n    }\n}\nresp = process_request(url, method, pe_user, pe_password, headers, payload)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT enabled\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"IIS","description":"","attrs":{"type":"","script":"# Adding IIS feature\nInstall-WindowsFeature -name Web-Server -IncludeManagementTools\n\n# Setting IIS service to start automatically\nSet-Service -name W3SVC -startupType Automatic\n\n# Creating the HTML page and placing it in the wwwroot directory\n$indexHtmlContent = @\"\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      font-family: Arial, sans-serif;\n      text-align: center;\n      background-color: #f5f5f5;\n    }\n    img {\n      max-width: 200px;\n      height: auto;\n      margin-bottom: 20px;\n    }\n  <\/style>\n<\/head>\n<body>\n  <div>\n    <img src='https:\/\/portaleacquisti.aci.it\/aciinformatica\/images\/logo.aci.informatica.png' alt='ACI INFORMATICA Logo' \/>\n    <h1>!! Welcome to ACI INFORMATICA !!<\/h1>\n    <p>Web site is deployed on the Windows IIS<\/p>\n  <\/div>\n<\/body>\n<\/html>\n\"@\n\n# Writing the HTML content to the IIS default website directory\nSet-Content -Path \"C:\\\\inetpub\\\\wwwroot\\\\index.html\" -Value $indexHtmlContent\n","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Git","description":"","attrs":{"type":"","script":" #Reference - https:\/\/github.com\/git-for-windows\/git\/wiki\/Silent-or-Unattended-Installation\n# https:\/\/stackoverflow.com\/questions\/46731433\/how-to-download-and-install-git-client-for-window-using-powershell\n\n#Avoding SSL\/TLS secure channel error using below command. By default powershell uses TLS 1.0 the site security requires TLS 1.2 \n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n# get latest download url for git-for-windows 64-bit exe\n$git_url = \"https:\/\/api.github.com\/repos\/git-for-windows\/git\/releases\/latest\"\n$asset = Invoke-RestMethod -Method Get -Uri $git_url | % assets | where name -like \"*64-bit.exe\"\n\n# download installer\n$installer = \"$env:temp\\$($asset.name)\"\nInvoke-WebRequest -Uri $asset.browser_download_url -OutFile $installer\n\n# run installer\n#$git_install_inf = \"<install inf file>\"\n\n$install_args = \"\/SP- \/VERYSILENT \/SUPPRESSMSGBOXES \/NOCANCEL \/NORESTART \/CLOSEAPPLICATIONS \/RESTARTAPPLICATIONS\"\nStart-Process -FilePath $installer -ArgumentList $install_args -Wait\n\n\n #Git-1.9.4-preview20140611.exe \/SILENT \/COMPONENTS=\"icons,ext\\reg\\shellhere,assoc,assoc_sh\" \n","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"vsCode","description":"","attrs":{"type":"","script":"# To avoid TLS errors \n [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 \n\n # if you want specific version you can mention - https:\/\/update.code.visualstudio.com\/{version}\/win32-x64\/stable \n # Ref - https:\/\/code.visualstudio.com\/docs\/supporting\/faq#_previous-release-versions\n\n $SourceURL = \"https:\/\/update.code.visualstudio.com\/latest\/win32-x64\/stable\"\n $Installer = $env:TEMP + \"\\vscode.exe\" \n Invoke-WebRequest $SourceURL -OutFile $Installer\n Start-Process -FilePath $Installer -Args \"\/verysilent \/tasks=addcontextmenufiles,addcontextmenufolders,addtopath\" -Wait\n Remove-Item $Installer\n \n #This is to refersh the shell. Without this we cannot get the code version from the same powershell\n $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n \n #To show the code version\n code --version \n ","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"2be3584b_dag","kind":"app_task"},"variable_list":[]},"uninstall_runbook":{"name":"e9d81e79_runbook","description":"","task_definition_list":[{"type":"DAG","name":"6ce0ca68_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Package1","kind":"app_package"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"6ce0ca68_dag","kind":"app_task"},"variable_list":[]},"upgrade_runbook":{}}},{"type":"DEB","name":"Package1_cloned_0","description":"","variable_list":[],"action_list":[],"service_local_reference_list":[{"name":"Windows","kind":"app_service"}],"version":"","options":{"type":"","install_runbook":{"name":"f9975b05_runbook_cloned_0","description":"","task_definition_list":[{"type":"DAG","name":"2be3584b_dag_cloned_1","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"pcMountNGT_cloned_1","kind":"app_task"},"to_task_reference":{"name":"NGTInstaller_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"NGTInstaller_cloned_1","kind":"app_task"},"to_task_reference":{"name":"PcEnableNewNgt_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"PcEnableNewNgt_cloned_1","kind":"app_task"},"to_task_reference":{"name":"IIS_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"IIS_cloned_1","kind":"app_task"},"to_task_reference":{"name":"Git_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Git_cloned_1","kind":"app_task"},"to_task_reference":{"name":"vsCode_cloned_1","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"pcMountNGT_cloned_1","kind":"app_task"},{"name":"NGTInstaller_cloned_1","kind":"app_task"},{"name":"PcEnableNewNgt_cloned_1","kind":"app_task"},{"name":"IIS_cloned_1","kind":"app_task"},{"name":"Git_cloned_1","kind":"app_task"},{"name":"vsCode_cloned_1","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Package1_cloned_0","kind":"app_package"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"pcMountNGT_cloned_1","description":"","attrs":{"type":"","script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcMountNgt\n# description:    This script mounts the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm.\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Mounting NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n\n# region mount the NGT image (to regenerate the certificates)\npe_password = \"nx2Tech206!\"\npe_user = \"admin\"\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}\/guest_tools\/mount\".format(\n    cluster_ip,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pe_user, pe_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT mounted\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"NGTInstaller_cloned_1","description":"","attrs":{"type":"","script":"<#\n.notes\n##############################################################################\n#          Nutanix Guest Tools Active Directory Installer Script\n#          Filename            :      NTNX_NGT_Startup_Installer.ps1\n#          Script Version      :      1.0.5\n#          Author              :      Ed McAndrew (ed.mcandrew@nutanix.com)\n##############################################################################\n.prerequisites\n    1. Powershell 4 or above ($psversiontable.psversion.major)\n    2. Windows Vista or newer.\n    3. There is a shared key exchange between the ISO\/Mount process and the Nutanix Guest Tools installation process.\n            a) For Nutanix Guest Tools to work properly, you MUST mount the Nutanix Guest Tools ISO to the virtual machine prior to this startup script execution.\n            b) To do this, either use Prism to mount the NGT ISO, or from SSH to one of your Controller Virtual Machines (CVMs), run the following.\n                $ ncli ngt mount vm-id=<vm_id>\n                note: To get the <vm_id>, you can use the following command\n                            $ ncli vm list | grep -B2 <part of your vm name>\n                            Example; Our <vm_id> will be: 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                $ ncli vm list | grep -B2 emcandrew\n                                Id                        : 00056eb6-a64f-650a-0000-00000000a8bb::11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Uuid                      : 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Name                      : emcandrew-win10\n                note: You can also do a mass mounting of the Nutanix Guest Tools (WARNING: THIS WILL MOUNT THE NGT ISO ON ALL VIRTUAL MACHINES):\n                            To Mount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt mount vm-id=$i;done\n                            To Unmount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt unmount vm-id=$i;done\n                note: You can also build a master list of virtual machines, edit that list and then mount the NGT ISO based on the edited list.\n                            To build the list:\n                                $ ncli vm list | egrep 'Id|Name' | grep -v \"Hypervisor\" | awk '{$1=$2=\"\"; print $0}' | paste -sd ' \\n' > ~\/ngt_iso_mount.txt\n                            Once done editing with VIM (vi), save the file and run the following one-liner.  This one will parse each line of the file and mount the NGT ISO to each VM.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nMounting NGT: $a\"; ncli ngt mount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n                            The installation package will eject the ISO when it completes.  But if you need to manually unmount the ISO, you can use this same process but unmount instead.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nUnmounting NGT: $a\"; ncli ngt unmount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n.synopsis\n    Determine if Nutanix Guest Tools (NGT) is installed.  If not installed, determine mount path for NGT ISO and install from that.  Basic state information written to Application Event log under eventid 1.\n.usage\n    Run this script from an Active Directory startup script GPO\n.author\n    Ed McAndrew (ed.mcandrew@nutanix.com)\n.disclaimer\n    This script is provided \"AS IS\" without any additional support of any kind.\n    This script is provided \"AS IS\" without warranty of any kind, either expressed or implied, including but not limited to the implied warranties of merchantability and\/or fitness for a particular purpose.\n#>\n##############################################################################\n# SET VARIABLES\n##############################################################################\n$my_log_directory = \"c:\\temp\"\n##############################################################################\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n# CHANGE NOTHING BELOW HERE!\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n[string]$my_temperract = $erroractionpreference # set error handling preferences\n[string]$erroractionpreference = \"silentlycontinue\" # set error handling preferences\n$ntnx_cnt = 0\nfunction write-log {\n    [cmdletbinding()]\n    param(\n        [parameter(valuefrompipeline=$true,mandatory=$true)] [validatenotnullorempty()]\n        [string] $message,\n        [parameter()] [validateset(\"Error\", \"Warn\", \"Info\")]\n        [string] $level = \"Info\"\n    )\n    $eventid = 1\n    $eventlogname = \"Application\"\n    $eventsource = \"Nutanix Guest Tools Installer Script\"\n    if (-not [diagnostics.eventlog]::sourceexists($eventsource)) { [diagnostics.eventlog]::createeventsource($eventsource, $eventlogname) }\n    $log = new-object system.diagnostics.eventlog\n    $log.set_log($eventlogname)\n    $log.set_source($eventsource)\n    switch ($level) {\n        \"error\" { $log.writeentry($message, 'Error', $eventid) }\n        \"warn\"  { $log.writeentry($message, 'Warning', $eventid) }\n        \"info\"  { $log.writeentry($message, 'Information', $eventid) }\n    }\n}\nget-wmiobject -class win32_product | % { if ($_.Name -match \"nutanix\") { $ntnx_cnt++ } }\nif ($ntnx_cnt -ne 6) {\n    $my_driveid = (get-ciminstance Win32_LogicalDisk | ?{ $_.volumename -eq \"NUTANIX_TOOLS\" }).deviceid\n    $my_date = get-date -format 'MMddyyyy_HHmm'\n    $my_files = @(\"Nutanix_Guest_Tools*\")\n    if ($my_driveid) {\n        try {\n            if (test-path \"$($my_driveid)\\setup.exe\") {\n                write-log -message\"Starting Nutanix Guest Tools Installer...\" -level info\n                $process = start-process \"$($my_driveid)\\setup.exe\" -windowstyle Hidden -argumentlist \"\/quiet \/norestart ACCEPTEULA=YES IGNOREALLWARNINGS=yes log $($my_log_directory)\\NGT\\\" -passthru -wait\n                if ($process.exitcode -eq 0) {\n                    write-log -message \"Installation Succeeded...\" -level info\n                }\n                else {\n                    write-log -message \"Installation failed, non-zero exit code...\" -level warn\n                }\n            }\n            else {\n                    write-log -message \"Installation failed, setup executable not found...\" -level warn\n            }\n        }\n        catch {\n            write-log -message \"Installation failed...`r`n$($_)\" -level error\n        }\n        new-item -itemtype directory -force -path \"$($my_log_directory)\\NGT\" | out-null; get-childitem -recurse ($env:temp) -include ($my_files) | move-item -destination \"$($my_log_directory)\\NGT\\\" -ea silentlycontinue\n    }\n    else {\n        write-log -message \"Installation failed, ISO not mounted...\" -level warn\n    }\n}\nelse {\n    write-log -message \"Nutanix Guest Tools is already installed...\" -level info\n}\n$erroractionpreference = $my_temperract\nexit\n########","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"PcEnableNewNgt_cloned_1","description":"","attrs":{"type":"","script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       salaheddine.gassim@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcEnableNewNgt\n# description:    This script enables the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm. It assumes NGT has been\n#                 installed after the VM was deployed (as opposed to being\n#                 pre-installed in the VM template).\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\nvm_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/vms\/{}\".format(\n    pc_ip,\n    vm_uuid\n)\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Enabling NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion\n\n# region enable guest tools for the VM\npe_password = \"nx2Tech206!\"\npe_user = \"admin\"\n\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}::{}\/guest_tools\".format(\n    cluster_ip,\n    cluster_uuid,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\npayload = {\n    \"vmUuid\": cluster_uuid + \"::\" + vm_uuid,\n    \"enabled\": \"true\",\n    \"applications\": {\n        \"file_level_restore\": \"false\",\n        \"vss_snapshot\": \"true\"\n    }\n}\nresp = process_request(url, method, pe_user, pe_password, headers, payload)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT enabled\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"IIS_cloned_1","description":"","attrs":{"type":"","script":"# Adding IIS feature\nInstall-WindowsFeature -name Web-Server -IncludeManagementTools\n\n# Setting IIS service to start automatically\nSet-Service -name W3SVC -startupType Automatic\n\n# Creating the HTML page and placing it in the wwwroot directory\n$indexHtmlContent = @\"\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      font-family: Arial, sans-serif;\n      text-align: center;\n      background-color: #f5f5f5;\n    }\n    img {\n      max-width: 200px;\n      height: auto;\n      margin-bottom: 20px;\n    }\n  <\/style>\n<\/head>\n<body>\n  <div>\n    <img src='https:\/\/portaleacquisti.aci.it\/aciinformatica\/images\/logo.aci.informatica.png' alt='ACI INFORMATICA Logo' \/>\n    <h1>!! Welcome to ACI INFORMATICA !!<\/h1>\n    <p>Web site is deployed on the Windows IIS<\/p>\n  <\/div>\n<\/body>\n<\/html>\n\"@\n\n# Writing the HTML content to the IIS default website directory\nSet-Content -Path \"C:\\\\inetpub\\\\wwwroot\\\\index.html\" -Value $indexHtmlContent\n","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Git_cloned_1","description":"","attrs":{"type":"","script":" #Reference - https:\/\/github.com\/git-for-windows\/git\/wiki\/Silent-or-Unattended-Installation\n# https:\/\/stackoverflow.com\/questions\/46731433\/how-to-download-and-install-git-client-for-window-using-powershell\n\n#Avoding SSL\/TLS secure channel error using below command. By default powershell uses TLS 1.0 the site security requires TLS 1.2 \n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n# get latest download url for git-for-windows 64-bit exe\n$git_url = \"https:\/\/api.github.com\/repos\/git-for-windows\/git\/releases\/latest\"\n$asset = Invoke-RestMethod -Method Get -Uri $git_url | % assets | where name -like \"*64-bit.exe\"\n\n# download installer\n$installer = \"$env:temp\\$($asset.name)\"\nInvoke-WebRequest -Uri $asset.browser_download_url -OutFile $installer\n\n# run installer\n#$git_install_inf = \"<install inf file>\"\n\n$install_args = \"\/SP- \/VERYSILENT \/SUPPRESSMSGBOXES \/NOCANCEL \/NORESTART \/CLOSEAPPLICATIONS \/RESTARTAPPLICATIONS\"\nStart-Process -FilePath $installer -ArgumentList $install_args -Wait\n\n\n #Git-1.9.4-preview20140611.exe \/SILENT \/COMPONENTS=\"icons,ext\\reg\\shellhere,assoc,assoc_sh\" \n","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"vsCode_cloned_1","description":"","attrs":{"type":"","script":"# To avoid TLS errors \n [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 \n\n # if you want specific version you can mention - https:\/\/update.code.visualstudio.com\/{version}\/win32-x64\/stable \n # Ref - https:\/\/code.visualstudio.com\/docs\/supporting\/faq#_previous-release-versions\n\n $SourceURL = \"https:\/\/update.code.visualstudio.com\/latest\/win32-x64\/stable\"\n $Installer = $env:TEMP + \"\\vscode.exe\" \n Invoke-WebRequest $SourceURL -OutFile $Installer\n Start-Process -FilePath $Installer -Args \"\/verysilent \/tasks=addcontextmenufiles,addcontextmenufolders,addtopath\" -Wait\n Remove-Item $Installer\n \n #This is to refersh the shell. Without this we cannot get the code version from the same powershell\n $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n \n #To show the code version\n code --version \n ","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"2be3584b_dag_cloned_1","kind":"app_task"},"variable_list":[]},"uninstall_runbook":{"name":"e9d81e79_runbook_cloned_0","description":"","task_definition_list":[{"type":"DAG","name":"6ce0ca68_dag_cloned_1","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Package1_cloned_0","kind":"app_package"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"6ce0ca68_dag_cloned_1","kind":"app_task"},"variable_list":[]},"upgrade_runbook":{}}},{"type":"DEB","name":"Package1_cloned_1","description":"","variable_list":[],"action_list":[],"service_local_reference_list":[{"name":"Windows","kind":"app_service"}],"version":"","options":{"type":"","install_runbook":{"name":"f9975b05_runbook_cloned_1","description":"","task_definition_list":[{"type":"DAG","name":"2be3584b_dag_cloned_1","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"pcMountNGT_cloned_1","kind":"app_task"},"to_task_reference":{"name":"NGTInstaller_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"NGTInstaller_cloned_1","kind":"app_task"},"to_task_reference":{"name":"PcEnableNewNgt_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"PcEnableNewNgt_cloned_1","kind":"app_task"},"to_task_reference":{"name":"IIS_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"IIS_cloned_1","kind":"app_task"},"to_task_reference":{"name":"Git_cloned_1","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Git_cloned_1","kind":"app_task"},"to_task_reference":{"name":"vsCode_cloned_1","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"pcMountNGT_cloned_1","kind":"app_task"},{"name":"NGTInstaller_cloned_1","kind":"app_task"},{"name":"PcEnableNewNgt_cloned_1","kind":"app_task"},{"name":"IIS_cloned_1","kind":"app_task"},{"name":"Git_cloned_1","kind":"app_task"},{"name":"vsCode_cloned_1","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Package1_cloned_1","kind":"app_package"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"pcMountNGT_cloned_1","description":"","attrs":{"type":"","script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcMountNgt\n# description:    This script mounts the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm.\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Mounting NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n\n# region mount the NGT image (to regenerate the certificates)\npe_password = \"nx2Tech206!\"\npe_user = \"admin\"\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}\/guest_tools\/mount\".format(\n    cluster_ip,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pe_user, pe_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT mounted\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"NGTInstaller_cloned_1","description":"","attrs":{"type":"","script":"<#\n.notes\n##############################################################################\n#          Nutanix Guest Tools Active Directory Installer Script\n#          Filename            :      NTNX_NGT_Startup_Installer.ps1\n#          Script Version      :      1.0.5\n#          Author              :      Ed McAndrew (ed.mcandrew@nutanix.com)\n##############################################################################\n.prerequisites\n    1. Powershell 4 or above ($psversiontable.psversion.major)\n    2. Windows Vista or newer.\n    3. There is a shared key exchange between the ISO\/Mount process and the Nutanix Guest Tools installation process.\n            a) For Nutanix Guest Tools to work properly, you MUST mount the Nutanix Guest Tools ISO to the virtual machine prior to this startup script execution.\n            b) To do this, either use Prism to mount the NGT ISO, or from SSH to one of your Controller Virtual Machines (CVMs), run the following.\n                $ ncli ngt mount vm-id=<vm_id>\n                note: To get the <vm_id>, you can use the following command\n                            $ ncli vm list | grep -B2 <part of your vm name>\n                            Example; Our <vm_id> will be: 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                $ ncli vm list | grep -B2 emcandrew\n                                Id                        : 00056eb6-a64f-650a-0000-00000000a8bb::11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Uuid                      : 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Name                      : emcandrew-win10\n                note: You can also do a mass mounting of the Nutanix Guest Tools (WARNING: THIS WILL MOUNT THE NGT ISO ON ALL VIRTUAL MACHINES):\n                            To Mount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt mount vm-id=$i;done\n                            To Unmount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt unmount vm-id=$i;done\n                note: You can also build a master list of virtual machines, edit that list and then mount the NGT ISO based on the edited list.\n                            To build the list:\n                                $ ncli vm list | egrep 'Id|Name' | grep -v \"Hypervisor\" | awk '{$1=$2=\"\"; print $0}' | paste -sd ' \\n' > ~\/ngt_iso_mount.txt\n                            Once done editing with VIM (vi), save the file and run the following one-liner.  This one will parse each line of the file and mount the NGT ISO to each VM.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nMounting NGT: $a\"; ncli ngt mount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n                            The installation package will eject the ISO when it completes.  But if you need to manually unmount the ISO, you can use this same process but unmount instead.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nUnmounting NGT: $a\"; ncli ngt unmount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n.synopsis\n    Determine if Nutanix Guest Tools (NGT) is installed.  If not installed, determine mount path for NGT ISO and install from that.  Basic state information written to Application Event log under eventid 1.\n.usage\n    Run this script from an Active Directory startup script GPO\n.author\n    Ed McAndrew (ed.mcandrew@nutanix.com)\n.disclaimer\n    This script is provided \"AS IS\" without any additional support of any kind.\n    This script is provided \"AS IS\" without warranty of any kind, either expressed or implied, including but not limited to the implied warranties of merchantability and\/or fitness for a particular purpose.\n#>\n##############################################################################\n# SET VARIABLES\n##############################################################################\n$my_log_directory = \"c:\\temp\"\n##############################################################################\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n# CHANGE NOTHING BELOW HERE!\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n[string]$my_temperract = $erroractionpreference # set error handling preferences\n[string]$erroractionpreference = \"silentlycontinue\" # set error handling preferences\n$ntnx_cnt = 0\nfunction write-log {\n    [cmdletbinding()]\n    param(\n        [parameter(valuefrompipeline=$true,mandatory=$true)] [validatenotnullorempty()]\n        [string] $message,\n        [parameter()] [validateset(\"Error\", \"Warn\", \"Info\")]\n        [string] $level = \"Info\"\n    )\n    $eventid = 1\n    $eventlogname = \"Application\"\n    $eventsource = \"Nutanix Guest Tools Installer Script\"\n    if (-not [diagnostics.eventlog]::sourceexists($eventsource)) { [diagnostics.eventlog]::createeventsource($eventsource, $eventlogname) }\n    $log = new-object system.diagnostics.eventlog\n    $log.set_log($eventlogname)\n    $log.set_source($eventsource)\n    switch ($level) {\n        \"error\" { $log.writeentry($message, 'Error', $eventid) }\n        \"warn\"  { $log.writeentry($message, 'Warning', $eventid) }\n        \"info\"  { $log.writeentry($message, 'Information', $eventid) }\n    }\n}\nget-wmiobject -class win32_product | % { if ($_.Name -match \"nutanix\") { $ntnx_cnt++ } }\nif ($ntnx_cnt -ne 6) {\n    $my_driveid = (get-ciminstance Win32_LogicalDisk | ?{ $_.volumename -eq \"NUTANIX_TOOLS\" }).deviceid\n    $my_date = get-date -format 'MMddyyyy_HHmm'\n    $my_files = @(\"Nutanix_Guest_Tools*\")\n    if ($my_driveid) {\n        try {\n            if (test-path \"$($my_driveid)\\setup.exe\") {\n                write-log -message\"Starting Nutanix Guest Tools Installer...\" -level info\n                $process = start-process \"$($my_driveid)\\setup.exe\" -windowstyle Hidden -argumentlist \"\/quiet \/norestart ACCEPTEULA=YES IGNOREALLWARNINGS=yes log $($my_log_directory)\\NGT\\\" -passthru -wait\n                if ($process.exitcode -eq 0) {\n                    write-log -message \"Installation Succeeded...\" -level info\n                }\n                else {\n                    write-log -message \"Installation failed, non-zero exit code...\" -level warn\n                }\n            }\n            else {\n                    write-log -message \"Installation failed, setup executable not found...\" -level warn\n            }\n        }\n        catch {\n            write-log -message \"Installation failed...`r`n$($_)\" -level error\n        }\n        new-item -itemtype directory -force -path \"$($my_log_directory)\\NGT\" | out-null; get-childitem -recurse ($env:temp) -include ($my_files) | move-item -destination \"$($my_log_directory)\\NGT\\\" -ea silentlycontinue\n    }\n    else {\n        write-log -message \"Installation failed, ISO not mounted...\" -level warn\n    }\n}\nelse {\n    write-log -message \"Nutanix Guest Tools is already installed...\" -level info\n}\n$erroractionpreference = $my_temperract\nexit\n########","script_type":"npsscript","command_line_args":"","exit_status":[],"login_credential_local_reference":{"name":"vm_cred","kind":"app_credential"}},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"PcEnableNewNgt_cloned_1","description":"","attrs":{"type":"","script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       salaheddine.gassim@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcEnableNewNgt\n# description:    This script enables the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm. It assumes NGT has been\n#                 installed after the VM was deployed (as opposed to being\n#                 pre-installed in the VM template).\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\nvm_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/vms\/{}\".format(\n    pc_ip,\n    vm_uuid\n)\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Enabling NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion\n\n# region enable guest tools for the VM\npe_password = \"nx2Tech206!\"\npe_user = \"admin\"\n\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}::{}\/guest_tools\".format(\n    cluster_ip,\n    cluster_uuid,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\npayload = {\n    \"vmUuid\": cluster_uuid + \"::\" + vm_uuid,\n    \"enabled\": \"true\",\n    \"applications\": {\n        \"file_level_restore\": \"false\",\n        \"vss_snapshot\": \"true\"\n    }\n}\nresp = process_request(url, method, pe_user, pe_password, headers, payload)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT enabled\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"IIS_cloned_1","description":"","attrs":{"type":"","script":"# Adding IIS feature\nInstall-WindowsFeature -name Web-Server -IncludeManagementTools\n\n# Setting IIS service to start automatically\nSet-Service -name W3SVC -startupType Automatic\n\n# Creating the HTML page and placing it in the wwwroot directory\n$indexHtmlContent = @\"\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      font-family: Arial, sans-serif;\n      text-align: center;\n      background-color: #f5f5f5;\n    }\n    img {\n      max-width: 200px;\n      height: auto;\n      margin-bottom: 20px;\n    }\n  <\/style>\n<\/head>\n<body>\n  <div>\n    <img src='https:\/\/portaleacquisti.aci.it\/aciinformatica\/images\/logo.aci.informatica.png' alt='ACI INFORMATICA Logo' \/>\n    <h1>!! Welcome to ACI INFORMATICA !!<\/h1>\n    <p>Web site is deployed on the Windows IIS<\/p>\n  <\/div>\n<\/body>\n<\/html>\n\"@\n\n# Writing the HTML content to the IIS default website directory\nSet-Content -Path \"C:\\\\inetpub\\\\wwwroot\\\\index.html\" -Value $indexHtmlContent\n","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Git_cloned_1","description":"","attrs":{"type":"","script":" #Reference - https:\/\/github.com\/git-for-windows\/git\/wiki\/Silent-or-Unattended-Installation\n# https:\/\/stackoverflow.com\/questions\/46731433\/how-to-download-and-install-git-client-for-window-using-powershell\n\n#Avoding SSL\/TLS secure channel error using below command. By default powershell uses TLS 1.0 the site security requires TLS 1.2 \n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n# get latest download url for git-for-windows 64-bit exe\n$git_url = \"https:\/\/api.github.com\/repos\/git-for-windows\/git\/releases\/latest\"\n$asset = Invoke-RestMethod -Method Get -Uri $git_url | % assets | where name -like \"*64-bit.exe\"\n\n# download installer\n$installer = \"$env:temp\\$($asset.name)\"\nInvoke-WebRequest -Uri $asset.browser_download_url -OutFile $installer\n\n# run installer\n#$git_install_inf = \"<install inf file>\"\n\n$install_args = \"\/SP- \/VERYSILENT \/SUPPRESSMSGBOXES \/NOCANCEL \/NORESTART \/CLOSEAPPLICATIONS \/RESTARTAPPLICATIONS\"\nStart-Process -FilePath $installer -ArgumentList $install_args -Wait\n\n\n #Git-1.9.4-preview20140611.exe \/SILENT \/COMPONENTS=\"icons,ext\\reg\\shellhere,assoc,assoc_sh\" \n","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"vsCode_cloned_1","description":"","attrs":{"type":"","script":"# To avoid TLS errors \n [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 \n\n # if you want specific version you can mention - https:\/\/update.code.visualstudio.com\/{version}\/win32-x64\/stable \n # Ref - https:\/\/code.visualstudio.com\/docs\/supporting\/faq#_previous-release-versions\n\n $SourceURL = \"https:\/\/update.code.visualstudio.com\/latest\/win32-x64\/stable\"\n $Installer = $env:TEMP + \"\\vscode.exe\" \n Invoke-WebRequest $SourceURL -OutFile $Installer\n Start-Process -FilePath $Installer -Args \"\/verysilent \/tasks=addcontextmenufiles,addcontextmenufolders,addtopath\" -Wait\n Remove-Item $Installer\n \n #This is to refersh the shell. Without this we cannot get the code version from the same powershell\n $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n \n #To show the code version\n code --version \n ","script_type":"npsscript","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Windows","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"2be3584b_dag_cloned_1","kind":"app_task"},"variable_list":[]},"uninstall_runbook":{"name":"e9d81e79_runbook_cloned_1","description":"","task_definition_list":[{"type":"DAG","name":"6ce0ca68_dag_cloned_1","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Package1_cloned_1","kind":"app_package"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"6ce0ca68_dag_cloned_1","kind":"app_task"},"variable_list":[]},"upgrade_runbook":{}}}],"app_profile_list":[{"name":"Small","description":"","variable_list":[],"action_list":[],"deployment_create_list":[{"type":"GREENFIELD","name":"1be2c09d_deployment","description":"","variable_list":[],"action_list":[],"depends_on_list":[],"min_replicas":"1","max_replicas":"1","default_replicas":"1","package_local_reference_list":[{"name":"Package1","kind":"app_package"}],"substrate_local_reference":{"name":"BaseVM","kind":"app_substrate"},"published_service_local_reference_list":[]}],"snapshot_config_list":[],"restore_config_list":[],"environment_reference_list":[],"application_url":"","patch_list":[]},{"name":"Medium","description":"","variable_list":[],"action_list":[],"deployment_create_list":[{"type":"GREENFIELD","name":"deployment_7d8edbc7","description":"","variable_list":[],"action_list":[],"depends_on_list":[],"min_replicas":"1","max_replicas":"1","default_replicas":"1","package_local_reference_list":[{"name":"Package1_cloned_0","kind":"app_package"}],"substrate_local_reference":{"name":"BaseVM_cloned_0","kind":"app_substrate"},"published_service_local_reference_list":[]}],"snapshot_config_list":[],"restore_config_list":[],"environment_reference_list":[],"application_url":"","patch_list":[]},{"name":"Large","description":"","variable_list":[],"action_list":[],"deployment_create_list":[{"type":"GREENFIELD","name":"deployment_0a5827d8","description":"","variable_list":[],"action_list":[],"depends_on_list":[],"min_replicas":"1","max_replicas":"1","default_replicas":"1","package_local_reference_list":[{"name":"Package1_cloned_1","kind":"app_package"}],"substrate_local_reference":{"name":"BaseVM_cloned_1","kind":"app_substrate"},"published_service_local_reference_list":[]}],"snapshot_config_list":[],"restore_config_list":[],"environment_reference_list":[],"application_url":"","patch_list":[]}],"credential_definition_list":[{"type":"PASSWORD","name":"vm_cred","description":"","username":"Administrator","secret":{"attrs":{"secret_reference":{},"is_secret_modified":false}},"cred_class":"static"},{"type":"PASSWORD","name":"ad_credentials","description":"","username":"administrator@ntnxlab.local","secret":{"attrs":{"secret_reference":{},"is_secret_modified":false}},"cred_class":"static"},{"type":"PASSWORD","name":"pc","description":"","username":"rx-admin","secret":{"attrs":{"secret_reference":{},"is_secret_modified":false}},"cred_class":"static"}],"default_credential_local_reference":{"name":"vm_cred","kind":"app_credential"},"type":"USER","client_attrs":{"1be2c09d_deployment":{"y":392.5,"x":732},"deployment_7d8edbc7":{"x":732,"y":392.5},"deployment_0a5827d8":{"x":732,"y":392.5}}}},"api_version":"3.0","product_version":"3.8.1","metadata":{"last_update_time":"1737113734634649","creation_time":"1734075596715101","spec_version":16,"name":"Windows_Deployment_","kind":"blueprint"},"contains_secrets":false}